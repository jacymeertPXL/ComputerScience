DESC[RIBE] department
// geeft de hele table weer

SELECT department_name
FROM department;
// SELECT en bepaalde kolom van de databank

SELECT DISTINCT department_name
FROM department;
// SELECT en bepaalde kolom van de databank en geeft elke waarde unieken weer

SELECT *               
FROM department;
// SELECT alles van de databank

SELECT job_id, (max_salary - min_salary) AS "Verschil in salaris"
FROM jobs;
// AS zorgt er voor dat een of meerde tabellen een andere naam krijgen

SELECT last_name, salary, salary + 300 
FROM   employees;
// je kan de reken operators gebruiken als ge een kolom opvraagt

SELECT last_name| ' is a ' |job_id AS "Employees" 
FROM employees;
// voegt de tabellen samen en je kan tekst toevoegen tussen de || als je wilt

SELECT employee_id, last_name, job_id, department_id
FROM   employees 
WHERE  salary <= 3000 ;
WHERE  department_id = 90 ;
WHERE  last_name = 'Whalen' ;
WHERE  hire_date = '17-FEB-96' ;
// SELECT alleen maar de tabblen waar de WHERE voor gelt 

WHERE  salary BETWEEN 2500 AND 3500 ;
// waar de twee waarden tussen ligt vraag op

WHERE  manager_id IN (100, 101, 201) ; 
// geeft de kolom weer als het een van deze waarden is

WHERE  job_id NOT IN ('IT_PROG', 'ST_CLERK', 'SA_REP') ;
// geeft de kolom weer als het niet een van deze waarden is

WHEREfirst_name LIKE 'S%' ;
// geef de kolom weer waar het begint met een S en dan een of meerde charachters achter staan

WHERE  last_name LIKE '_o%' ;
// geeft de kolom weer waar er een o als tweede charachter staat en een charachter er voor

WHERE  manager_id IS NULL ;
// waar de waarde NULL is

WHERE  salary >= 10000 
AND    job_id LIKE '%MAN%' ;
// geeft de kolom weer waar allebij de waarden gelt

WHERE  salary >= 10000 
OR     job_id LIKE '%MAN%' ;
// geeft de kolom weer waar een van de twee gelt

SELECT   last_name, job_id, department_id, hire_date 
FROM     employees 
ORDER BY hire_date ASC|DESC ;
// geeft de kolom weer en ordert ze onder deze kolom 

SELECT employee_id, last_name, salary*12 annsal 
FROM   employees 
ORDER BY annsal ;
// order onder een alias gaat ook

DEFINE employee_num = 200
// geeft het een set waarde
UNDEFINE employee_num
// zorgt er voor dat wat de user ingeeft elke keer delete word anders kan de user maar een keer iets ingeven

SELECT employee_id, last_name, salary, &column_name
FROM   employees 
WHERE  employee_id = &employee_num ;
ORDER BY &order_column 
// hier wordt de kolom weergegeven met wat de user gaat ingeven

WHERE  job_id = '&job_title' ;
// hier wordt de kolom weergegeven met wat de user gaat ingeven voor een text

FUNCTIONS

LOWER: Maakt de table in lowercase
UPPER: Maakt de table in caps
INITCAPt: Maakt de eerste letter in caps
TRUNC: Haalt alles na de komma weg
CONCAT: Concatenates the first character value to the second character value; equivalent to concatenation operator (||)
SUBSTR: Returns specified characters from character value starting at character position m, n characters long (If m is negative, the count starts from the end of the character value. If n is 
omitted, all characters to the end of the string are returned.) 
LENGTH: geeft de lenght van de waarde in de table
INSTR: Geeft de terug waar de leter staat in het woord
TRIM: haalt een cijfer of teken uit u table
LPAD(column|expression, n, 'string'):Returns an expression left-padded to length of n characters with a character expression.
RPAD(column|expression, n, 'string'):Returns an expression right-padded to length of n characters with a character expression. 
REPLACE(text, search_string, replacement_string): Searches a text expression for a character string and, if found, replaces it with a specified replacement string

SELECT sysdate
FROM dual;
// geeft de datum van vandaag weer || dual is databank waar je op kan testen

SELECT MONTHS_BETWEEN ('01-SEP-95','11-JAN-94')
FROM dual;
// geeft het aantal maanden tussen de twee terug

SELECT ADD_MONTHS (‘31-JAN-96',1)
FROM dual;
// telt een aantal maanden op en geeft dan de nieuwe datum weer

SELECT NEXT_DAY   ('01-SEP-95','FRIDAY')
FROM dual;
// geeft de volgenden dag wijn datum weer volgende keer als die voorkomt

SELECT LAST_DAY   ('01-FEB-95')
FROM dual;
// geeft de laaste dag van de maand weer

// Assume SYSDATE='25-JUL-03':
// dit ga je dan terug krijgen
ROUND(SYSDATE ,'MONTH') 01-AUG-03
ROUND(SYSDATE ,'YEAR') 01-JAN-04
TRUNC(SYSDATE,'MONTH') 01-JUL-03
TRUNC(SYSDATE ,'YEAR') 01-JAN-03

SELECT last_name, TO_CHAR(hire_date, 'fmDD Month YYYY') AS HIREDATE
FROM   employees;
// geeft u datum als text weer op een bepaalde format

SELECT TO_CHAR(salary, '$99,999.00') AS SALARY 
FROM   employees 
// Geeft u number weer als een char met een bepaalde format

SELECT last_name, TO_CHAR(hire_date, 'DD-Mon-YYYY') 
FROM  employees 
WHERE hire_date < TO_DATE('01-Jan-90','DD-Mon-RR');
// geeft u de kolom met bepaalde format weer

SELECT last_name, UPPER(CONCAT(SUBSTR (LAST_NAME, 1, 8), '_US')) 
FROM   employees 
WHERE  department_id = 60;
// Voorbeeld hoe je meerde functions tegelijk kunt gebruiken

SELECT last_name, salary, NVL(commission_pct, 0)
FROM employees;
// zorgt er voor dat een NULL waarde zord omgezet naar een echte waarde

SELECT NVL2(commission_pct, 'SAL+COMM', 'SAL') income 
FROM   employees;
// de NULL waarde zord omgewet naar 2 mogelijk heden als het niet null is dan de eerste expressie of als het wel NULL is dan de tweede expressie

SELECT NULLIF(LENGTH(first_name)
FROM   employees;
// geeft een result weer als het er is anders geeft NULL terug

SELECT COALESCE(TO_CHAR(commission_pct),TO_CHAR(manager_id), 'No commission and no manager')
FROM   employees;
// geeft een van de twee waarde weer als allebij NULL zijn dan de tekst

SELECT last_name, job_id, salary, 
CASE job_id WHEN 'IT_PROG'  THEN  1.10*salary 
WHEN 'ST_CLERK' THEN  1.15*salary 
WHEN 'SA_REP'   THEN  1.20*salary 
ELSE      salary END     "REVISED_SALARY" 
FROM   employees;
// if else operator

SELECT last_name, job_id, salary, 
DECODE(job_id, 'IT_PROG',  1.10*salary, 
'ST_CLERK', 1.15*salary, 
'SA_REP',   1.20*salary, salary) 
REVISED_SALARY 
FROM   employees;
// if else operqtor

SELECT e.first_name ||' '|| e.last_name, s.name, sc.club_name, l.city
FROM employees e
JOIN employee_sports es
ON es.employee_number = e.employee_id
JOIN sport_clubs sc
ON sc.club_id = es.club_id AND sc.sport_id = es.sport_id
JOIN sports s
ON s.sport_id = sc.sport_id
JOIN locations l
ON l.location_id = sc.club_location
/
// voegt twee meedere tables samen die een kolom hebben die het zelfde zijn dus PK of FK

Pag 335 verder gaan

INSERT INTO departments(department_id,
department_date, manager_id, location_id, department_name)
VALUES (70, 'Public Relations', TO_DATE('FEB 3, 1999', 'MON DD, YYYY'), NULL, '&department_name');
// Default insert into data moeten ook altijd in de juiste format staan

INSERT INTO sales_reps(id, name, salary, commission_pct)
SELECT employee_id, last_name, salary, commission_pct
FROM employees
WHERE job_id LIKE '%REP%';
// je kan ook info pakkken van een vaan andere table waar ja dan insert into kan doen in de andere table

UPDATE employees
SET department_id = 50
WHERE employee_id = 113;
// update van een table 

UPDATE employees
SET job_id = (SELECT job_id
FROM employees
WHERE employee_id = 205),
salary = (SELECT salary
FROM employees
WHERE employee_id = 205)
WHERE employee_id = 113;
// update into van een Select qeury

DELETE FROM departments
WHERE department_name = ‘Finance';
// delete van een table

DELETE FROM employees
WHERE department_id =
(SELECT department_id
FROM departments
WHERE department_name
LIKE '%Public%');
// delete met een select qeury

TRUNCATE TABLE copy_emp;
// delete alle koloms uit de table maar laat de table intact

DELETE FROM copy_emp;
// delete alles van een table

COMMIT;
// commit qeury

ROLLBACK;
// zorgt er voor dat het alles rollabacked voor een commit

SELECT e.employee_id, e.salary, e.commission_pct
FROM employees e JOIN departments d
USING (department_id)
WHERE job_id = 'ST_CLERK‘
AND location_id = 1500
FOR UPDATE
ORDER BY e.employee_id;
// Locks rows identified by the SELECT query

DROP TABLE bestellingen CASCADE CONSTRAINTS;
// dropt een table en delete de constrains

CREATE TABLE dept80
AS
SELECT employee_id, last_name,
salary*12 ANNSAL,
hire_date
FROM employees
WHERE department_id = 80;
// create table van een select query

CREATE TABLE bestellingen (
  actiecode NUMBER (5) CONSTRAINT bes_actiecode_fk REFERENCES folders (actiecode),
  klantnr NUMBER(9) CONSTRAINT bes_klantnr_fk REFERENCES klanten (klantnr),
  besteldatum DATE,
  betalingsid NUMBER(1) CONSTRAINT bes_betalingsid_fk REFERENCES betalingswijzen (betalingsid),
  verzendingskosten NUMBER(6, 2) CONSTRAINT bes_verzending_nn NOT NULL,
  toegangscode NUMBER(5) CONSTRAINT bes_toegangscode_nn NOT NULL,
  leveringsnaam VARCHAR2(25) CONSTRAINT bes_leveringsnaam_nn NOT NULL,
  leveringsvoornaam VARCHAR2(50) CONSTRAINT bes_leveringsvoornaam_nn NOT NULL,
  leveringsgeslacht VARCHAR2(50) CONSTRAINT bes_leveringsgeslacht_nn NOT NULL,
  levering_adresid NUMBER(6) CONSTRAINT bes_levadresid_fk REFERENCES adressen (adresid),
  CONSTRAINT bes_pk PRIMARY KEY (actiecode, klantnr)
);
// create table qeury

CREATE TABLE employees
( employee_id NUMBER(6)
CONSTRAINT emp_employee_id PRIMARY KEY
, first_name VARCHAR2(20)
, last_name VARCHAR2(25)
CONSTRAINT emp_last_name_nn NOT NULL
, email VARCHAR2(25)
CONSTRAINT emp_email_nn NOT NULL
CONSTRAINT emp_email_uk UNIQUE
, phone_number VARCHAR2(20)
, hire_date DATE
CONSTRAINT emp_hire_date_nn NOT NULL
, job_id VARCHAR2(10)
CONSTRAINT emp_job_nn NOT NULL
, salary NUMBER(8,2)
CONSTRAINT emp_salary_ck CHECK (salary>0)
, commission_pct NUMBER(2,2)
, manager_id NUMBER(6)
CONSTRAINT emp_manager_fk REFERENCES
employees (employee_id)
, department_id NUMBER(4)
CONSTRAINT emp_dept_fk REFERENCES
departments (department_id));
// create table query

ALTER TABLE employees READ ONLY;
ALTER TABLE employees READ WRITE;
// verandert de read of write rechten

SELECT AVG(salary), MAX(salary), MIN(salary), SUM(salary)
FROM   employees 
WHERE  job_id LIKE '%REP%';
// avgerage maximun minumun en som van het salatry

SELECT MIN(hire_date), MAX(hire_date) 
FROMemployees;
// min en max operator kunnen ook gebruikt worden op dates

SELECT COUNT(commission_pct) 
FROM   employees WHERE  department_id = 80;
// count de not null rows in de table 

SELECT   department_id, job_id, SUM(salary) 
FROM     employees WHEREdepartment_id > 40 
GROUP BY department_id, job_id 
ORDER BY department_id;
// elke table die select word moet in de GROUP BY dit is alleen voor group functions

SELECT    column, group_function 
FROM      table 
[WHERE    condition]
[GROUP BY group_by_expression] 
[HAVING   group_condition] 
[ORDER BY column];
// dit is de format voor te werken met group expressions

SELECT   department_id, MAX(salary) 
FROM     employees 
GROUP BY department_id 
HAVING   MAX(salary)>10000 ;
// GROUP FUNCTIONS die een where moeten hebben moet in de HAVING worden gedaan

SELECT DISTINCT(job_id), COUNT(job_id)
FROM employees
GROUP BY job_id
// geeft voor elke distinct job het aantal dat er in zittten

SELECT DISTINCT(job_id), COUNT(job_id)
FROM employees
GROUP BY job_id
HAVING job_id='IT_PROG'
// geeft u aleen de table it frog waar dan het aantal er in word gecount 

CREATE VIEW empvu80 AS SELECT  employee_id, last_name, salary 
FROM    employees 
WHERE   department_id = 80;
// maakt een aparte view van u table aan
// insert into, updates, en delete querys werken in de view

CREATE OR REPLACE VIEW empvu80 (id_number, name, sal, department_id) 
AS SELECT  employee_id, first_name || ' ' || last_name, salary, department_id 
FROM    employees 
WHERE   department_id = 80;
// gaat de content van de view replacen en geeft ze namen

CREATE OR REPLACE VIEW dept_sum_vu (name, minsal, maxsal, avgsal) 
AS SELECT   d.department_name, MIN(e.salary), MAX(e.salary),AVG(e.salary) 
FROM     employees e JOIN departments d 
ON       (e.department_id = d.department_id) 
GROUP BY d.department_name;
// complex view 

CREATE OR REPLACE VIEW empvu20 
AS SELECT* 
FROM     employees 
WHERE    department_id = 20
WITH CHECK OPTION CONSTRAINT empvu20_ck ;
// Voert de query pas uit als de check option true is wat hier dan is department_id = 20

CREATE OR REPLACE VIEW empvu10 (employee_number, employee_name, job_title) 
AS SELECT employee_id, last_name, job_id 
FROM     employees 
WHERE    department_id = 10 
WITH READ ONLY;
WITH READ ONLY CONSTRAINT empvu10_ch; // andere mogelijkheid
// geeft de view read only rechten waardoor de REPLACE query niet gaat werken

DROP VIEW view;
// dropped de view uit de databank

CREATE SEQUENCE dept_deptid_seq 
INCREMENT BY 10 
START WITH 120 
MAXVALUE 9999 
NOCACHE 
NOCYCLE;
//sequence query maakt query aan voor getallen te maken

ALTER SEQUENCE dept_deptid_seq 
INCREMENT BY 20 
MAXVALUE 999999 
NOCACHE 
NOCYCLE;
// een update voor de sequence 

DROP SEQUENCE dept_deptid_seq;
// dropepd the sequence

INSERT INTO departments(department_id, department_name, location_id)
VALUES      (dept_deptid_seq.NEXTVAL, 'Support', 2500);
// gaat nu met de nieuwe getallen die aangemaakt zijn in de sequence in de table zetten

SELECTdept_deptid_seq.CURRVAL 
FROMdual;
//geeft u de current getal dat in de sequence gebruikt word

CREATE INDEX emp_last_name_idx 
ON employees(last_name);
// maakt de index aan dit is voor de performance van een qeury te boosten

DROP INDEX index;
// dropped de index 

CREATE SYNONYM  d_sum 
FOR  dept_sum_vu;
// maakt een copie aan van een andere table

DROP SYNONYM d_sum;
// dropped de synonym table